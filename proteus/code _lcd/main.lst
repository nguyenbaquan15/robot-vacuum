CCS PCH C Compiler, Version 4.140, 28366               10-Apr-15 18:21

               Filename:   C:\Users\khadinh\Desktop\code\main.lst

               ROM used:   792 bytes (2%)
                           Largest free fragment is 31976
               RAM used:   4 (0%) at main() level
                           17 (1%) worst case
               Stack:     6 locations

*
0000:  GOTO   02AE
.................... #include <main.h> 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=12000000) 
*
0068:  CLRF   FEA
006A:  MOVLW  08
006C:  MOVWF  FE9
006E:  MOVF   FEF,W
0070:  BZ    008E
0072:  MOVLW  03
0074:  MOVWF  01
0076:  CLRF   00
0078:  DECFSZ 00,F
007A:  BRA    0078
007C:  DECFSZ 01,F
007E:  BRA    0076
0080:  MOVLW  E3
0082:  MOVWF  00
0084:  DECFSZ 00,F
0086:  BRA    0084
0088:  NOP   
008A:  DECFSZ FEF,F
008C:  BRA    0072
008E:  RETURN 0
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN  PIN_C0                                     
.................... #define LCD_RS_PIN      PIN_C3                                   
.................... #define LCD_RW_PIN      PIN_C1                                    
.................... #define LCD_DATA4       PIN_C4                                     
.................... #define LCD_DATA5       PIN_C5                                     
.................... #define LCD_DATA6       PIN_C6                                     
.................... #define LCD_DATA7       PIN_C7     
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0124:  BSF    F94.4
....................    output_float(LCD_DATA5); 
0126:  BSF    F94.5
....................    output_float(LCD_DATA6); 
0128:  BSF    F94.6
....................    output_float(LCD_DATA7); 
012A:  BSF    F94.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
012C:  BSF    F8B.1
012E:  BCF    F94.1
....................    delay_cycles(1); 
0130:  NOP   
....................    lcd_output_enable(1); 
0132:  BSF    F8B.0
0134:  BCF    F94.0
....................    delay_cycles(1); 
0136:  NOP   
....................    high = lcd_read_nibble(); 
0138:  RCALL  00D2
013A:  MOVFF  01,0F
....................        
....................    lcd_output_enable(0); 
013E:  BCF    F8B.0
0140:  BCF    F94.0
....................    delay_cycles(1); 
0142:  NOP   
....................    lcd_output_enable(1); 
0144:  BSF    F8B.0
0146:  BCF    F94.0
....................    delay_us(1); 
0148:  BRA    014A
014A:  NOP   
....................    low = lcd_read_nibble(); 
014C:  RCALL  00D2
014E:  MOVFF  01,0E
....................        
....................    lcd_output_enable(0); 
0152:  BCF    F8B.0
0154:  BCF    F94.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0156:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
0158:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
015A:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
015C:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
015E:  SWAPF  0F,W
0160:  MOVWF  00
0162:  MOVLW  F0
0164:  ANDWF  00,F
0166:  MOVF   00,W
0168:  IORWF  0E,W
016A:  MOVWF  01
.................... } 
016C:  GOTO   017C (RETURN)
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00D2:  CLRF   10
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00D4:  BSF    F94.4
00D6:  MOVLW  00
00D8:  BTFSC  F82.4
00DA:  MOVLW  01
00DC:  IORWF  10,F
....................    n |= input(LCD_DATA5) << 1; 
00DE:  BSF    F94.5
00E0:  MOVLW  00
00E2:  BTFSC  F82.5
00E4:  MOVLW  01
00E6:  MOVWF  00
00E8:  BCF    FD8.0
00EA:  RLCF   00,F
00EC:  MOVF   00,W
00EE:  IORWF  10,F
....................    n |= input(LCD_DATA6) << 2; 
00F0:  BSF    F94.6
00F2:  MOVLW  00
00F4:  BTFSC  F82.6
00F6:  MOVLW  01
00F8:  MOVWF  00
00FA:  RLCF   00,F
00FC:  RLCF   00,F
00FE:  MOVLW  FC
0100:  ANDWF  00,F
0102:  MOVF   00,W
0104:  IORWF  10,F
....................    n |= input(LCD_DATA7) << 3; 
0106:  BSF    F94.7
0108:  MOVLW  00
010A:  BTFSC  F82.7
010C:  MOVLW  01
010E:  MOVWF  00
0110:  RLCF   00,F
0112:  RLCF   00,F
0114:  RLCF   00,F
0116:  MOVLW  F8
0118:  ANDWF  00,F
011A:  MOVF   00,W
011C:  IORWF  10,F
....................     
....................    return(n); 
011E:  MOVFF  10,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
0122:  RETURN 0
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0090:  BTFSC  0F.0
0092:  BRA    0098
0094:  BCF    F8B.4
0096:  BRA    009A
0098:  BSF    F8B.4
009A:  BCF    F94.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
009C:  BTFSC  0F.1
009E:  BRA    00A4
00A0:  BCF    F8B.5
00A2:  BRA    00A6
00A4:  BSF    F8B.5
00A6:  BCF    F94.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00A8:  BTFSC  0F.2
00AA:  BRA    00B0
00AC:  BCF    F8B.6
00AE:  BRA    00B2
00B0:  BSF    F8B.6
00B2:  BCF    F94.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00B4:  BTFSC  0F.3
00B6:  BRA    00BC
00B8:  BCF    F8B.7
00BA:  BRA    00BE
00BC:  BSF    F8B.7
00BE:  BCF    F94.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00C0:  NOP   
....................    lcd_output_enable(1); 
00C2:  BSF    F8B.0
00C4:  BCF    F94.0
....................    delay_us(2); 
00C6:  BRA    00C8
00C8:  BRA    00CA
00CA:  BRA    00CC
....................    lcd_output_enable(0); 
00CC:  BCF    F8B.0
00CE:  BCF    F94.0
.................... } 
00D0:  RETURN 0
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0170:  BCF    F94.0
....................    lcd_rs_tris(); 
0172:  BCF    F94.3
....................    lcd_rw_tris(); 
0174:  BCF    F94.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0176:  BCF    F8B.3
0178:  BCF    F94.3
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
017A:  BRA    0124
017C:  MOVFF  01,0E
0180:  BTFSC  01.7
0182:  BRA    017A
....................    lcd_output_rs(address); 
0184:  MOVF   0C,F
0186:  BNZ   018C
0188:  BCF    F8B.3
018A:  BRA    018E
018C:  BSF    F8B.3
018E:  BCF    F94.3
....................    delay_cycles(1); 
0190:  NOP   
....................    lcd_output_rw(0); 
0192:  BCF    F8B.1
0194:  BCF    F94.1
....................    delay_cycles(1); 
0196:  NOP   
....................    lcd_output_enable(0); 
0198:  BCF    F8B.0
019A:  BCF    F94.0
....................    lcd_send_nibble(n >> 4); 
019C:  SWAPF  0D,W
019E:  MOVWF  0E
01A0:  MOVLW  0F
01A2:  ANDWF  0E,F
01A4:  MOVFF  0E,0F
01A8:  RCALL  0090
....................    lcd_send_nibble(n & 0xf); 
01AA:  MOVF   0D,W
01AC:  ANDLW  0F
01AE:  MOVWF  0E
01B0:  MOVWF  0F
01B2:  RCALL  0090
.................... } 
01B4:  RETURN 0
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01B6:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
01B8:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
01BA:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
01BC:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01BE:  BCF    F94.0
....................    lcd_rs_tris(); 
01C0:  BCF    F94.3
....................    lcd_rw_tris(); 
01C2:  BCF    F94.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
01C4:  BCF    F8B.3
01C6:  BCF    F94.3
....................    lcd_output_rw(0); 
01C8:  BCF    F8B.1
01CA:  BCF    F94.1
....................    lcd_output_enable(0); 
01CC:  BCF    F8B.0
01CE:  BCF    F94.0
....................      
....................    delay_ms(15); 
01D0:  MOVLW  0F
01D2:  MOVWF  08
01D4:  RCALL  0068
....................    for(i=1;i<=3;++i) 
01D6:  MOVLW  01
01D8:  MOVWF  05
01DA:  MOVF   05,W
01DC:  SUBLW  03
01DE:  BNC   01F0
....................    { 
....................        lcd_send_nibble(3); 
01E0:  MOVLW  03
01E2:  MOVWF  0F
01E4:  RCALL  0090
....................        delay_ms(5); 
01E6:  MOVLW  05
01E8:  MOVWF  08
01EA:  RCALL  0068
....................    } 
01EC:  INCF   05,F
01EE:  BRA    01DA
....................     
....................    lcd_send_nibble(2); 
01F0:  MOVLW  02
01F2:  MOVWF  0F
01F4:  RCALL  0090
....................    delay_ms(5); 
01F6:  MOVLW  05
01F8:  MOVWF  08
01FA:  RCALL  0068
....................    for(i=0;i<=3;++i) 
01FC:  CLRF   05
01FE:  MOVF   05,W
0200:  SUBLW  03
0202:  BNC   0216
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0204:  CLRF   03
0206:  MOVF   05,W
0208:  RCALL  0004
020A:  MOVWF  06
020C:  CLRF   0C
020E:  MOVWF  0D
0210:  RCALL  0170
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0212:  INCF   05,F
0214:  BRA    01FE
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0216:  GOTO   02C4 (RETURN)
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
021A:  DECFSZ 09,W
021C:  BRA    0220
021E:  BRA    0226
....................       address=LCD_LINE_TWO; 
0220:  MOVLW  40
0222:  MOVWF  0A
....................    else 
0224:  BRA    0228
....................       address=0; 
0226:  CLRF   0A
....................       
....................    address+=x-1; 
0228:  MOVLW  01
022A:  SUBWF  08,W
022C:  ADDWF  0A,F
....................    lcd_send_byte(0,0x80|address); 
022E:  MOVF   0A,W
0230:  IORLW  80
0232:  MOVWF  0B
0234:  CLRF   0C
0236:  MOVWF  0D
0238:  RCALL  0170
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
023A:  RETURN 0
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
023C:  MOVF   07,W
023E:  XORLW  07
0240:  BZ    0250
0242:  XORLW  0B
0244:  BZ    025A
0246:  XORLW  06
0248:  BZ    026A
024A:  XORLW  02
024C:  BZ    0276
024E:  BRA    0280
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0250:  MOVLW  01
0252:  MOVWF  08
0254:  MOVWF  09
0256:  RCALL  021A
0258:  BRA    028A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
025A:  CLRF   0C
025C:  MOVLW  01
025E:  MOVWF  0D
0260:  RCALL  0170
....................                      delay_ms(2); 
0262:  MOVLW  02
0264:  MOVWF  08
0266:  RCALL  0068
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0268:  BRA    028A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
026A:  MOVLW  01
026C:  MOVWF  08
026E:  MOVLW  02
0270:  MOVWF  09
0272:  RCALL  021A
0274:  BRA    028A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0276:  CLRF   0C
0278:  MOVLW  10
027A:  MOVWF  0D
027C:  RCALL  0170
027E:  BRA    028A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0280:  MOVLW  01
0282:  MOVWF  0C
0284:  MOVFF  07,0D
0288:  RCALL  0170
....................      #endif 
....................    } 
.................... } 
028A:  GOTO   02A2 (RETURN)
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... void main() 
.................... { 
*
02AE:  CLRF   FF8
02B0:  BCF    FD0.7
02B2:  CLRF   FEA
02B4:  CLRF   FE9
02B6:  MOVF   FC1,W
02B8:  ANDLW  C0
02BA:  IORLW  0F
02BC:  MOVWF  FC1
02BE:  MOVLW  07
02C0:  MOVWF  FB4
....................    lcd_init(); 
02C2:  BRA    01B6
....................    lcd_putc("DO AN TOT NGHIEP"); delay_ms(100); 
02C4:  MOVLW  18
02C6:  MOVWF  FF6
02C8:  MOVLW  00
02CA:  MOVWF  FF7
02CC:  RCALL  028E
02CE:  MOVLW  64
02D0:  MOVWF  08
02D2:  RCALL  0068
....................    lcd_putc("\fSV THUC HIEN"); delay_ms(100); 
02D4:  MOVLW  2A
02D6:  MOVWF  FF6
02D8:  MOVLW  00
02DA:  MOVWF  FF7
02DC:  RCALL  028E
02DE:  MOVLW  64
02E0:  MOVWF  08
02E2:  RCALL  0068
....................    lcd_putc("\fNGUYEN BA QUAN\n"); delay_ms(100); 
02E4:  MOVLW  38
02E6:  MOVWF  FF6
02E8:  MOVLW  00
02EA:  MOVWF  FF7
02EC:  RCALL  028E
02EE:  MOVLW  64
02F0:  MOVWF  08
02F2:  RCALL  0068
....................    lcd_putc("\fNGUYEN QUOC VU"); delay_ms(100); 
02F4:  MOVLW  4A
02F6:  MOVWF  FF6
02F8:  MOVLW  00
02FA:  MOVWF  FF7
02FC:  RCALL  028E
02FE:  MOVLW  64
0300:  MOVWF  08
0302:  RCALL  0068
....................    lcd_putc("\fDINH DUC KHA"); delay_ms(100); 
0304:  MOVLW  5A
0306:  MOVWF  FF6
0308:  MOVLW  00
030A:  MOVWF  FF7
030C:  RCALL  028E
030E:  MOVLW  64
0310:  MOVWF  08
0312:  RCALL  0068
....................    
....................  /* cach2 thu vien lcd khac 
....................   int str[20]; 
....................   LCD_Clear(); 
....................   LCD_Gotoxy(0,0); 
....................   sprintf(str,"SO PHOI THAP"); 
....................   LCD_Puts(str); 
....................   delay_ms(1000); 
....................   */ 
....................    while(TRUE) 
....................    {    
....................     
....................    } 
0314:  BRA    0314
....................  
.................... } 
0316:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 0E18   PUT NOBROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
