CCS PCH C Compiler, Version 4.140, 28366               12-Apr-15 10:03

               Filename:   C:\Users\quan\Desktop\test\main.lst

               ROM used:   1038 bytes (3%)
                           Largest free fragment is 31730
               RAM used:   4 (0%) at main() level
                           17 (1%) worst case
               Stack:     7 locations

*
0000:  GOTO   03A2
.................... #include <main.h> 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=12000000) 
*
0090:  CLRF   FEA
0092:  MOVLW  08
0094:  MOVWF  FE9
0096:  MOVF   FEF,W
0098:  BZ    00B6
009A:  MOVLW  03
009C:  MOVWF  01
009E:  CLRF   00
00A0:  DECFSZ 00,F
00A2:  BRA    00A0
00A4:  DECFSZ 01,F
00A6:  BRA    009E
00A8:  MOVLW  E3
00AA:  MOVWF  00
00AC:  DECFSZ 00,F
00AE:  BRA    00AC
00B0:  NOP   
00B2:  DECFSZ FEF,F
00B4:  BRA    009A
00B6:  RETURN 0
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN  PIN_C0                                    //// 
.................... #define LCD_RS_PIN      PIN_C3                                    //// 
.................... #define LCD_RW_PIN      PIN_C1                                    //// 
.................... #define LCD_DATA4       PIN_C4                                    //// 
.................... #define LCD_DATA5       PIN_C5                                    //// 
.................... #define LCD_DATA6       PIN_C6                                    //// 
.................... #define LCD_DATA7       PIN_C7   
.................... #include <lcd.c>                  // khai bao sau khi khai bao cac chan 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
014C:  BSF    F94.4
....................    output_float(LCD_DATA5); 
014E:  BSF    F94.5
....................    output_float(LCD_DATA6); 
0150:  BSF    F94.6
....................    output_float(LCD_DATA7); 
0152:  BSF    F94.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0154:  BSF    F8B.1
0156:  BCF    F94.1
....................    delay_cycles(1); 
0158:  NOP   
....................    lcd_output_enable(1); 
015A:  BSF    F8B.0
015C:  BCF    F94.0
....................    delay_cycles(1); 
015E:  NOP   
....................    high = lcd_read_nibble(); 
0160:  RCALL  00FA
0162:  MOVFF  01,0F
....................        
....................    lcd_output_enable(0); 
0166:  BCF    F8B.0
0168:  BCF    F94.0
....................    delay_cycles(1); 
016A:  NOP   
....................    lcd_output_enable(1); 
016C:  BSF    F8B.0
016E:  BCF    F94.0
....................    delay_us(1); 
0170:  BRA    0172
0172:  NOP   
....................    low = lcd_read_nibble(); 
0174:  RCALL  00FA
0176:  MOVFF  01,0E
....................        
....................    lcd_output_enable(0); 
017A:  BCF    F8B.0
017C:  BCF    F94.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
017E:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
0180:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
0182:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
0184:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0186:  SWAPF  0F,W
0188:  MOVWF  00
018A:  MOVLW  F0
018C:  ANDWF  00,F
018E:  MOVF   00,W
0190:  IORWF  0E,W
0192:  MOVWF  01
.................... } 
0194:  GOTO   01A4 (RETURN)
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00FA:  CLRF   10
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00FC:  BSF    F94.4
00FE:  MOVLW  00
0100:  BTFSC  F82.4
0102:  MOVLW  01
0104:  IORWF  10,F
....................    n |= input(LCD_DATA5) << 1; 
0106:  BSF    F94.5
0108:  MOVLW  00
010A:  BTFSC  F82.5
010C:  MOVLW  01
010E:  MOVWF  00
0110:  BCF    FD8.0
0112:  RLCF   00,F
0114:  MOVF   00,W
0116:  IORWF  10,F
....................    n |= input(LCD_DATA6) << 2; 
0118:  BSF    F94.6
011A:  MOVLW  00
011C:  BTFSC  F82.6
011E:  MOVLW  01
0120:  MOVWF  00
0122:  RLCF   00,F
0124:  RLCF   00,F
0126:  MOVLW  FC
0128:  ANDWF  00,F
012A:  MOVF   00,W
012C:  IORWF  10,F
....................    n |= input(LCD_DATA7) << 3; 
012E:  BSF    F94.7
0130:  MOVLW  00
0132:  BTFSC  F82.7
0134:  MOVLW  01
0136:  MOVWF  00
0138:  RLCF   00,F
013A:  RLCF   00,F
013C:  RLCF   00,F
013E:  MOVLW  F8
0140:  ANDWF  00,F
0142:  MOVF   00,W
0144:  IORWF  10,F
....................     
....................    return(n); 
0146:  MOVFF  10,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
014A:  RETURN 0
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00B8:  BTFSC  0F.0
00BA:  BRA    00C0
00BC:  BCF    F8B.4
00BE:  BRA    00C2
00C0:  BSF    F8B.4
00C2:  BCF    F94.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00C4:  BTFSC  0F.1
00C6:  BRA    00CC
00C8:  BCF    F8B.5
00CA:  BRA    00CE
00CC:  BSF    F8B.5
00CE:  BCF    F94.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00D0:  BTFSC  0F.2
00D2:  BRA    00D8
00D4:  BCF    F8B.6
00D6:  BRA    00DA
00D8:  BSF    F8B.6
00DA:  BCF    F94.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00DC:  BTFSC  0F.3
00DE:  BRA    00E4
00E0:  BCF    F8B.7
00E2:  BRA    00E6
00E4:  BSF    F8B.7
00E6:  BCF    F94.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00E8:  NOP   
....................    lcd_output_enable(1); 
00EA:  BSF    F8B.0
00EC:  BCF    F94.0
....................    delay_us(2); 
00EE:  BRA    00F0
00F0:  BRA    00F2
00F2:  BRA    00F4
....................    lcd_output_enable(0); 
00F4:  BCF    F8B.0
00F6:  BCF    F94.0
.................... } 
00F8:  RETURN 0
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0198:  BCF    F94.0
....................    lcd_rs_tris(); 
019A:  BCF    F94.3
....................    lcd_rw_tris(); 
019C:  BCF    F94.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
019E:  BCF    F8B.3
01A0:  BCF    F94.3
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
01A2:  BRA    014C
01A4:  MOVFF  01,0E
01A8:  BTFSC  01.7
01AA:  BRA    01A2
....................    lcd_output_rs(address); 
01AC:  MOVF   0C,F
01AE:  BNZ   01B4
01B0:  BCF    F8B.3
01B2:  BRA    01B6
01B4:  BSF    F8B.3
01B6:  BCF    F94.3
....................    delay_cycles(1); 
01B8:  NOP   
....................    lcd_output_rw(0); 
01BA:  BCF    F8B.1
01BC:  BCF    F94.1
....................    delay_cycles(1); 
01BE:  NOP   
....................    lcd_output_enable(0); 
01C0:  BCF    F8B.0
01C2:  BCF    F94.0
....................    lcd_send_nibble(n >> 4); 
01C4:  SWAPF  0D,W
01C6:  MOVWF  0E
01C8:  MOVLW  0F
01CA:  ANDWF  0E,F
01CC:  MOVFF  0E,0F
01D0:  RCALL  00B8
....................    lcd_send_nibble(n & 0xf); 
01D2:  MOVF   0D,W
01D4:  ANDLW  0F
01D6:  MOVWF  0E
01D8:  MOVWF  0F
01DA:  RCALL  00B8
.................... } 
01DC:  RETURN 0
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01DE:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
01E0:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
01E2:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
01E4:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01E6:  BCF    F94.0
....................    lcd_rs_tris(); 
01E8:  BCF    F94.3
....................    lcd_rw_tris(); 
01EA:  BCF    F94.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
01EC:  BCF    F8B.3
01EE:  BCF    F94.3
....................    lcd_output_rw(0); 
01F0:  BCF    F8B.1
01F2:  BCF    F94.1
....................    lcd_output_enable(0); 
01F4:  BCF    F8B.0
01F6:  BCF    F94.0
....................      
....................    delay_ms(15); 
01F8:  MOVLW  0F
01FA:  MOVWF  08
01FC:  RCALL  0090
....................    for(i=1;i<=3;++i) 
01FE:  MOVLW  01
0200:  MOVWF  05
0202:  MOVF   05,W
0204:  SUBLW  03
0206:  BNC   0218
....................    { 
....................        lcd_send_nibble(3); 
0208:  MOVLW  03
020A:  MOVWF  0F
020C:  RCALL  00B8
....................        delay_ms(5); 
020E:  MOVLW  05
0210:  MOVWF  08
0212:  RCALL  0090
....................    } 
0214:  INCF   05,F
0216:  BRA    0202
....................     
....................    lcd_send_nibble(2); 
0218:  MOVLW  02
021A:  MOVWF  0F
021C:  RCALL  00B8
....................    delay_ms(5); 
021E:  MOVLW  05
0220:  MOVWF  08
0222:  RCALL  0090
....................    for(i=0;i<=3;++i) 
0224:  CLRF   05
0226:  MOVF   05,W
0228:  SUBLW  03
022A:  BNC   023E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
022C:  CLRF   03
022E:  MOVF   05,W
0230:  RCALL  0004
0232:  MOVWF  06
0234:  CLRF   0C
0236:  MOVWF  0D
0238:  RCALL  0198
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
023A:  INCF   05,F
023C:  BRA    0226
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
023E:  GOTO   03B8 (RETURN)
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0242:  DECFSZ 09,W
0244:  BRA    0248
0246:  BRA    024E
....................       address=LCD_LINE_TWO; 
0248:  MOVLW  40
024A:  MOVWF  0A
....................    else 
024C:  BRA    0250
....................       address=0; 
024E:  CLRF   0A
....................       
....................    address+=x-1; 
0250:  MOVLW  01
0252:  SUBWF  08,W
0254:  ADDWF  0A,F
....................    lcd_send_byte(0,0x80|address); 
0256:  MOVF   0A,W
0258:  IORLW  80
025A:  MOVWF  0B
025C:  CLRF   0C
025E:  MOVWF  0D
0260:  RCALL  0198
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0262:  RETURN 0
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0264:  MOVF   07,W
0266:  XORLW  07
0268:  BZ    0278
026A:  XORLW  0B
026C:  BZ    0282
026E:  XORLW  06
0270:  BZ    0292
0272:  XORLW  02
0274:  BZ    029E
0276:  BRA    02A8
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0278:  MOVLW  01
027A:  MOVWF  08
027C:  MOVWF  09
027E:  RCALL  0242
0280:  BRA    02B2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0282:  CLRF   0C
0284:  MOVLW  01
0286:  MOVWF  0D
0288:  RCALL  0198
....................                      delay_ms(2); 
028A:  MOVLW  02
028C:  MOVWF  08
028E:  RCALL  0090
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0290:  BRA    02B2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0292:  MOVLW  01
0294:  MOVWF  08
0296:  MOVLW  02
0298:  MOVWF  09
029A:  RCALL  0242
029C:  BRA    02B2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
029E:  CLRF   0C
02A0:  MOVLW  10
02A2:  MOVWF  0D
02A4:  RCALL  0198
02A6:  BRA    02B2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02A8:  MOVLW  01
02AA:  MOVWF  0C
02AC:  MOVFF  07,0D
02B0:  RCALL  0198
....................      #endif 
....................    } 
.................... } 
02B2:  GOTO   02CA (RETURN)
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... void dongco(); 
.................... void main() 
.................... { 
*
03A2:  CLRF   FF8
03A4:  BCF    FD0.7
03A6:  CLRF   FEA
03A8:  CLRF   FE9
03AA:  MOVF   FC1,W
03AC:  ANDLW  C0
03AE:  IORLW  0F
03B0:  MOVWF  FC1
03B2:  MOVLW  07
03B4:  MOVWF  FB4
....................  
....................    lcd_init(); 
03B6:  BRA    01DE
....................    lcd_putc("DO AN TOT NGHIEP"); delay_ms(100); 
03B8:  MOVLW  18
03BA:  MOVWF  FF6
03BC:  MOVLW  00
03BE:  MOVWF  FF7
03C0:  RCALL  02B6
03C2:  MOVLW  64
03C4:  MOVWF  08
03C6:  RCALL  0090
....................    lcd_putc("\fSV THUC HIEN"); delay_ms(100); 
03C8:  MOVLW  2A
03CA:  MOVWF  FF6
03CC:  MOVLW  00
03CE:  MOVWF  FF7
03D0:  RCALL  02B6
03D2:  MOVLW  64
03D4:  MOVWF  08
03D6:  RCALL  0090
....................    lcd_putc("\fNGUYEN BA QUAN\n"); delay_ms(100); 
03D8:  MOVLW  38
03DA:  MOVWF  FF6
03DC:  MOVLW  00
03DE:  MOVWF  FF7
03E0:  RCALL  02B6
03E2:  MOVLW  64
03E4:  MOVWF  08
03E6:  RCALL  0090
....................    lcd_putc("\fNGUYEN QUOC VU"); delay_ms(100); 
03E8:  MOVLW  4A
03EA:  MOVWF  FF6
03EC:  MOVLW  00
03EE:  MOVWF  FF7
03F0:  RCALL  02B6
03F2:  MOVLW  64
03F4:  MOVWF  08
03F6:  RCALL  0090
....................    lcd_putc("\fDINH DUC KHA"); delay_ms(100); 
03F8:  MOVLW  5A
03FA:  MOVWF  FF6
03FC:  MOVLW  00
03FE:  MOVWF  FF7
0400:  RCALL  02B6
0402:  MOVLW  64
0404:  MOVWF  08
0406:  RCALL  0090
....................  
....................  
....................    while(TRUE) 
....................    { 
....................       dongco(); 
0408:  BRA    02D6
....................    } 
040A:  BRA    0408
....................  
.................... } 
.................... void dongco() 
.................... { 
040C:  SLEEP 
....................    if(input(PIN_A1)==1)             
*
02D6:  BSF    F92.1
02D8:  BTFSS  F80.1
02DA:  BRA    02FE
....................     { output_d(0x05);     //0101 tien 
02DC:  CLRF   F95
02DE:  MOVLW  05
02E0:  MOVWF  F8C
....................       lcd_putc("tien"); delay_ms(20); 
02E2:  MOVLW  68
02E4:  MOVWF  FF6
02E6:  MOVLW  00
02E8:  MOVWF  FF7
02EA:  RCALL  02B6
02EC:  MOVLW  14
02EE:  MOVWF  08
02F0:  RCALL  0090
....................       lcd_putc("\f");  
02F2:  MOVLW  6E
02F4:  MOVWF  FF6
02F6:  MOVLW  00
02F8:  MOVWF  FF7
02FA:  RCALL  02B6
....................     }    
....................      else if (input(PIN_A2)==1)    
02FC:  BRA    039E
02FE:  BSF    F92.2
0300:  BTFSS  F80.2
0302:  BRA    0326
....................       { output_d(0x0A);    //1010 lui  
0304:  CLRF   F95
0306:  MOVLW  0A
0308:  MOVWF  F8C
....................         lcd_putc("lui");   delay_ms(20);  
030A:  MOVLW  70
030C:  MOVWF  FF6
030E:  MOVLW  00
0310:  MOVWF  FF7
0312:  RCALL  02B6
0314:  MOVLW  14
0316:  MOVWF  08
0318:  RCALL  0090
....................         lcd_putc("\f"); 
031A:  MOVLW  74
031C:  MOVWF  FF6
031E:  MOVLW  00
0320:  MOVWF  FF7
0322:  RCALL  02B6
....................       } 
....................      else if(input(PIN_A3)==1)    
0324:  BRA    039E
0326:  BSF    F92.3
0328:  BTFSS  F80.3
032A:  BRA    034E
....................       { output_d(0x04);    //0100 trai 
032C:  CLRF   F95
032E:  MOVLW  04
0330:  MOVWF  F8C
....................         lcd_putc("trai");  delay_ms(20); 
0332:  MOVLW  76
0334:  MOVWF  FF6
0336:  MOVLW  00
0338:  MOVWF  FF7
033A:  RCALL  02B6
033C:  MOVLW  14
033E:  MOVWF  08
0340:  RCALL  0090
....................         lcd_putc("\f"); 
0342:  MOVLW  7C
0344:  MOVWF  FF6
0346:  MOVLW  00
0348:  MOVWF  FF7
034A:  RCALL  02B6
....................       } 
....................      else if(input(PIN_A4)==1)   
034C:  BRA    039E
034E:  BSF    F92.4
0350:  BTFSS  F80.4
0352:  BRA    0376
....................       { output_d(0x01);    //0001 phai 
0354:  CLRF   F95
0356:  MOVLW  01
0358:  MOVWF  F8C
....................         lcd_putc("phai"); delay_ms(20); 
035A:  MOVLW  7E
035C:  MOVWF  FF6
035E:  MOVLW  00
0360:  MOVWF  FF7
0362:  RCALL  02B6
0364:  MOVLW  14
0366:  MOVWF  08
0368:  RCALL  0090
....................         lcd_putc("\f"); 
036A:  MOVLW  84
036C:  MOVWF  FF6
036E:  MOVLW  00
0370:  MOVWF  FF7
0372:  RCALL  02B6
....................       } 
....................      else  
0374:  BRA    039E
....................       { lcd_putc("\f"); 
0376:  MOVLW  86
0378:  MOVWF  FF6
037A:  MOVLW  00
037C:  MOVWF  FF7
037E:  RCALL  02B6
....................         output_d(0x00); 
0380:  CLRF   F95
0382:  CLRF   F8C
....................         lcd_putc("dung");delay_ms(20); 
0384:  MOVLW  88
0386:  MOVWF  FF6
0388:  MOVLW  00
038A:  MOVWF  FF7
038C:  RCALL  02B6
038E:  MOVLW  14
0390:  MOVWF  08
0392:  RCALL  0090
....................         lcd_putc("\f"); 
0394:  MOVLW  8E
0396:  MOVWF  FF6
0398:  MOVLW  00
039A:  MOVWF  FF7
039C:  RCALL  02B6
....................       } 
.................... } 
039E:  GOTO   040A (RETURN)
....................  

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 0E18   PUT NOBROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
