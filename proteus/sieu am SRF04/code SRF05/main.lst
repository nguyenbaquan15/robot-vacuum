CCS PCH C Compiler, Version 4.140, 28366               16-Apr-15 10:30

               Filename:   C:\Users\quan\Desktop\code SRF05\main.lst

               ROM used:   3432 bytes (10%)
                           Largest free fragment is 29332
               RAM used:   33 (2%) at main() level
                           75 (5%) worst case
               Stack:     8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   0C9E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0338
0060:  BTFSS  FF0.4
0062:  GOTO   006C
0066:  BTFSC  FF0.1
0068:  GOTO   03B2
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=12000000) 
*
043C:  CLRF   FEA
043E:  MOVLW  2F
0440:  MOVWF  FE9
0442:  MOVF   FEF,W
0444:  BZ    0462
0446:  MOVLW  03
0448:  MOVWF  01
044A:  CLRF   00
044C:  DECFSZ 00,F
044E:  BRA    044C
0450:  DECFSZ 01,F
0452:  BRA    044A
0454:  MOVLW  E3
0456:  MOVWF  00
0458:  DECFSZ 00,F
045A:  BRA    0458
045C:  NOP   
045E:  DECFSZ FEF,F
0460:  BRA    0446
0462:  RETURN 0
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN  PIN_C0                                     
.................... #define LCD_RS_PIN      PIN_C3                                     
.................... #define LCD_RW_PIN      PIN_C1                                     
.................... #define LCD_DATA4       PIN_C4                                     
.................... #define LCD_DATA5       PIN_C5                                     
.................... #define LCD_DATA6       PIN_C6                                     
.................... #define LCD_DATA7       PIN_C7   
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
04F8:  BSF    F94.4
....................    output_float(LCD_DATA5); 
04FA:  BSF    F94.5
....................    output_float(LCD_DATA6); 
04FC:  BSF    F94.6
....................    output_float(LCD_DATA7); 
04FE:  BSF    F94.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0500:  BSF    F8B.1
0502:  BCF    F94.1
....................    delay_cycles(1); 
0504:  NOP   
....................    lcd_output_enable(1); 
0506:  BSF    F8B.0
0508:  BCF    F94.0
....................    delay_cycles(1); 
050A:  NOP   
....................    high = lcd_read_nibble(); 
050C:  RCALL  04A6
050E:  MOVFF  01,36
....................        
....................    lcd_output_enable(0); 
0512:  BCF    F8B.0
0514:  BCF    F94.0
....................    delay_cycles(1); 
0516:  NOP   
....................    lcd_output_enable(1); 
0518:  BSF    F8B.0
051A:  BCF    F94.0
....................    delay_us(1); 
051C:  BRA    051E
051E:  NOP   
....................    low = lcd_read_nibble(); 
0520:  RCALL  04A6
0522:  MOVFF  01,35
....................        
....................    lcd_output_enable(0); 
0526:  BCF    F8B.0
0528:  BCF    F94.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
052A:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
052C:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
052E:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
0530:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0532:  SWAPF  36,W
0534:  MOVWF  00
0536:  MOVLW  F0
0538:  ANDWF  00,F
053A:  MOVF   00,W
053C:  IORWF  35,W
053E:  MOVWF  01
.................... } 
0540:  GOTO   0550 (RETURN)
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
04A6:  CLRF   37
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
04A8:  BSF    F94.4
04AA:  MOVLW  00
04AC:  BTFSC  F82.4
04AE:  MOVLW  01
04B0:  IORWF  37,F
....................    n |= input(LCD_DATA5) << 1; 
04B2:  BSF    F94.5
04B4:  MOVLW  00
04B6:  BTFSC  F82.5
04B8:  MOVLW  01
04BA:  MOVWF  00
04BC:  BCF    FD8.0
04BE:  RLCF   00,F
04C0:  MOVF   00,W
04C2:  IORWF  37,F
....................    n |= input(LCD_DATA6) << 2; 
04C4:  BSF    F94.6
04C6:  MOVLW  00
04C8:  BTFSC  F82.6
04CA:  MOVLW  01
04CC:  MOVWF  00
04CE:  RLCF   00,F
04D0:  RLCF   00,F
04D2:  MOVLW  FC
04D4:  ANDWF  00,F
04D6:  MOVF   00,W
04D8:  IORWF  37,F
....................    n |= input(LCD_DATA7) << 3; 
04DA:  BSF    F94.7
04DC:  MOVLW  00
04DE:  BTFSC  F82.7
04E0:  MOVLW  01
04E2:  MOVWF  00
04E4:  RLCF   00,F
04E6:  RLCF   00,F
04E8:  RLCF   00,F
04EA:  MOVLW  F8
04EC:  ANDWF  00,F
04EE:  MOVF   00,W
04F0:  IORWF  37,F
....................     
....................    return(n); 
04F2:  MOVFF  37,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
04F6:  RETURN 0
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0464:  BTFSC  36.0
0466:  BRA    046C
0468:  BCF    F8B.4
046A:  BRA    046E
046C:  BSF    F8B.4
046E:  BCF    F94.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0470:  BTFSC  36.1
0472:  BRA    0478
0474:  BCF    F8B.5
0476:  BRA    047A
0478:  BSF    F8B.5
047A:  BCF    F94.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
047C:  BTFSC  36.2
047E:  BRA    0484
0480:  BCF    F8B.6
0482:  BRA    0486
0484:  BSF    F8B.6
0486:  BCF    F94.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0488:  BTFSC  36.3
048A:  BRA    0490
048C:  BCF    F8B.7
048E:  BRA    0492
0490:  BSF    F8B.7
0492:  BCF    F94.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0494:  NOP   
....................    lcd_output_enable(1); 
0496:  BSF    F8B.0
0498:  BCF    F94.0
....................    delay_us(2); 
049A:  BRA    049C
049C:  BRA    049E
049E:  BRA    04A0
....................    lcd_output_enable(0); 
04A0:  BCF    F8B.0
04A2:  BCF    F94.0
.................... } 
04A4:  RETURN 0
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0544:  BCF    F94.0
....................    lcd_rs_tris(); 
0546:  BCF    F94.3
....................    lcd_rw_tris(); 
0548:  BCF    F94.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
054A:  BCF    F8B.3
054C:  BCF    F94.3
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
054E:  BRA    04F8
0550:  MOVFF  01,35
0554:  BTFSC  01.7
0556:  BRA    054E
....................    lcd_output_rs(address); 
0558:  MOVF   33,F
055A:  BNZ   0560
055C:  BCF    F8B.3
055E:  BRA    0562
0560:  BSF    F8B.3
0562:  BCF    F94.3
....................    delay_cycles(1); 
0564:  NOP   
....................    lcd_output_rw(0); 
0566:  BCF    F8B.1
0568:  BCF    F94.1
....................    delay_cycles(1); 
056A:  NOP   
....................    lcd_output_enable(0); 
056C:  BCF    F8B.0
056E:  BCF    F94.0
....................    lcd_send_nibble(n >> 4); 
0570:  SWAPF  34,W
0572:  MOVWF  35
0574:  MOVLW  0F
0576:  ANDWF  35,F
0578:  MOVFF  35,36
057C:  RCALL  0464
....................    lcd_send_nibble(n & 0xf); 
057E:  MOVF   34,W
0580:  ANDLW  0F
0582:  MOVWF  35
0584:  MOVWF  36
0586:  RCALL  0464
.................... } 
0588:  RETURN 0
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
058A:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
058C:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
058E:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
0590:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0592:  BCF    F94.0
....................    lcd_rs_tris(); 
0594:  BCF    F94.3
....................    lcd_rw_tris(); 
0596:  BCF    F94.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0598:  BCF    F8B.3
059A:  BCF    F94.3
....................    lcd_output_rw(0); 
059C:  BCF    F8B.1
059E:  BCF    F94.1
....................    lcd_output_enable(0); 
05A0:  BCF    F8B.0
05A2:  BCF    F94.0
....................      
....................    delay_ms(15); 
05A4:  MOVLW  0F
05A6:  MOVWF  2F
05A8:  RCALL  043C
....................    for(i=1;i<=3;++i) 
05AA:  MOVLW  01
05AC:  MOVWF  21
05AE:  MOVF   21,W
05B0:  SUBLW  03
05B2:  BNC   05C4
....................    { 
....................        lcd_send_nibble(3); 
05B4:  MOVLW  03
05B6:  MOVWF  36
05B8:  RCALL  0464
....................        delay_ms(5); 
05BA:  MOVLW  05
05BC:  MOVWF  2F
05BE:  RCALL  043C
....................    } 
05C0:  INCF   21,F
05C2:  BRA    05AE
....................     
....................    lcd_send_nibble(2); 
05C4:  MOVLW  02
05C6:  MOVWF  36
05C8:  RCALL  0464
....................    delay_ms(5); 
05CA:  MOVLW  05
05CC:  MOVWF  2F
05CE:  RCALL  043C
....................    for(i=0;i<=3;++i) 
05D0:  CLRF   21
05D2:  MOVF   21,W
05D4:  SUBLW  03
05D6:  BNC   05EA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
05D8:  CLRF   03
05DA:  MOVF   21,W
05DC:  RCALL  00BA
05DE:  MOVWF  22
05E0:  CLRF   33
05E2:  MOVWF  34
05E4:  RCALL  0544
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
05E6:  INCF   21,F
05E8:  BRA    05D2
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
05EA:  GOTO   0CCC (RETURN)
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
05EE:  DECFSZ 30,W
05F0:  BRA    05F4
05F2:  BRA    05FA
....................       address=LCD_LINE_TWO; 
05F4:  MOVLW  40
05F6:  MOVWF  31
....................    else 
05F8:  BRA    05FC
....................       address=0; 
05FA:  CLRF   31
....................       
....................    address+=x-1; 
05FC:  MOVLW  01
05FE:  SUBWF  2F,W
0600:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
0602:  MOVF   31,W
0604:  IORLW  80
0606:  MOVWF  32
0608:  CLRF   33
060A:  MOVWF  34
060C:  RCALL  0544
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
060E:  RETURN 0
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0610:  MOVF   2E,W
0612:  XORLW  07
0614:  BZ    0624
0616:  XORLW  0B
0618:  BZ    062E
061A:  XORLW  06
061C:  BZ    063E
061E:  XORLW  02
0620:  BZ    064A
0622:  BRA    0654
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0624:  MOVLW  01
0626:  MOVWF  2F
0628:  MOVWF  30
062A:  RCALL  05EE
062C:  BRA    065E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
062E:  CLRF   33
0630:  MOVLW  01
0632:  MOVWF  34
0634:  RCALL  0544
....................                      delay_ms(2); 
0636:  MOVLW  02
0638:  MOVWF  2F
063A:  RCALL  043C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
063C:  BRA    065E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
063E:  MOVLW  01
0640:  MOVWF  2F
0642:  MOVLW  02
0644:  MOVWF  30
0646:  RCALL  05EE
0648:  BRA    065E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
064A:  CLRF   33
064C:  MOVLW  10
064E:  MOVWF  34
0650:  RCALL  0544
0652:  BRA    065E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0654:  MOVLW  01
0656:  MOVWF  33
0658:  MOVFF  2E,34
065C:  RCALL  0544
....................      #endif 
....................    } 
.................... } 
065E:  RETURN 0
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define NO_OBJECT       0 
.................... float32 num_pulse,range; 
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    disable_interrupts(GLOBAL); 
*
0338:  BCF    FF2.6
033A:  BCF    FF2.7
033C:  BTFSC  FF2.7
033E:  BRA    033A
....................    num_pulse+=0xffff;  
0340:  BCF    FD8.1
0342:  MOVFF  1C,3E
0346:  MOVFF  1B,3D
034A:  MOVFF  1A,3C
034E:  MOVFF  19,3B
0352:  CLRF   42
0354:  SETF   41
0356:  MOVLW  7F
0358:  MOVWF  40
035A:  MOVLW  8E
035C:  MOVWF  3F
035E:  RCALL  00CE
0360:  MOVFF  03,1C
0364:  MOVFF  02,1B
0368:  MOVFF  01,1A
036C:  MOVFF  00,19
....................    enable_interrupts(GLOBAL); 
0370:  MOVLW  C0
0372:  IORWF  FF2,F
.................... } 
0374:  BCF    F9E.0
0376:  GOTO   006C
.................... #int_EXT2 
.................... void  EXT2_isr(void)  
.................... { 
....................    disable_interrupts(GLOBAL); 
*
03B2:  BCF    FF2.6
03B4:  BCF    FF2.7
03B6:  BTFSC  FF2.7
03B8:  BRA    03B4
....................    num_pulse+=get_timer1(); 
03BA:  MOVF   FCE,W
03BC:  MOVFF  FCF,03
03C0:  MOVWF  3B
03C2:  MOVFF  FCF,3C
03C6:  BRA    037A
03C8:  BCF    FD8.1
03CA:  MOVFF  1C,3E
03CE:  MOVFF  1B,3D
03D2:  MOVFF  1A,3C
03D6:  MOVFF  19,3B
03DA:  MOVFF  03,42
03DE:  MOVFF  02,41
03E2:  MOVFF  01,40
03E6:  MOVFF  00,3F
03EA:  RCALL  00CE
03EC:  MOVFF  03,1C
03F0:  MOVFF  02,1B
03F4:  MOVFF  01,1A
03F8:  MOVFF  00,19
....................    enable_interrupts(GLOBAL); 
03FC:  MOVLW  C0
03FE:  IORWF  FF2,F
.................... } 
.................... #define trig PIN_B3 
.................... #define echo PIN_B2 
....................   
0400:  BCF    FF0.1
0402:  GOTO   006C
.................... void start(); 
.................... float32 kc();   
.................... void main() 
.................... { 
*
0C9E:  CLRF   FF8
0CA0:  BCF    FD0.7
0CA2:  BSF    07.7
0CA4:  CLRF   FEA
0CA6:  CLRF   FE9
0CA8:  MOVF   FC1,W
0CAA:  ANDLW  C0
0CAC:  IORLW  0F
0CAE:  MOVWF  FC1
0CB0:  MOVLW  07
0CB2:  MOVWF  FB4
....................    enable_interrupts(INT_EXT2); 
0CB4:  BSF    FF0.4
....................    enable_interrupts( INT_EXT2_L2H ); 
0CB6:  BSF    FF0.4
0CB8:  BSF    FF1.4
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);      //21.8 ms overflow 
0CBA:  MOVLW  85
0CBC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0CBE:  BSF    F9D.0
....................    disable_interrupts(GLOBAL); 
0CC0:  BCF    FF2.6
0CC2:  BCF    FF2.7
0CC4:  BTFSC  FF2.7
0CC6:  BRA    0CC2
....................    port_b_pullups (TRUE); 
0CC8:  BCF    FF1.7
....................    lcd_init(); delay_us(1);  
0CCA:  BRA    058A
0CCC:  BRA    0CCE
0CCE:  NOP   
....................    lcd_putc("NGUYEN BA QUAN"); delay_ms(100); 
0CD0:  MOVLW  06
0CD2:  MOVWF  FF6
0CD4:  MOVLW  04
0CD6:  MOVWF  FF7
0CD8:  RCALL  0660
0CDA:  MOVLW  64
0CDC:  MOVWF  2F
0CDE:  CALL   043C
....................    lcd_putc("\f");      
0CE2:  MOVLW  16
0CE4:  MOVWF  FF6
0CE6:  MOVLW  04
0CE8:  MOVWF  FF7
0CEA:  RCALL  0660
....................    while(TRUE) 
....................    { 
....................       range=kc(); 
0CEC:  BRA    087A
0CEE:  MOVFF  03,20
0CF2:  MOVFF  02,1F
0CF6:  MOVFF  01,1E
0CFA:  MOVFF  00,1D
....................             if(range==NO_OBJECT) 
0CFE:  MOVFF  20,2C
0D02:  MOVFF  1F,2B
0D06:  MOVFF  1E,2A
0D0A:  MOVFF  1D,29
0D0E:  CLRF   30
0D10:  CLRF   2F
0D12:  CLRF   2E
0D14:  CLRF   2D
0D16:  RCALL  06AA
0D18:  BNZ   0D30
....................             {   
....................                lcd_putc("\f"); 
0D1A:  MOVLW  18
0D1C:  MOVWF  FF6
0D1E:  MOVLW  04
0D20:  MOVWF  FF7
0D22:  RCALL  0660
....................                lcd_putc("ko co vat can"); 
0D24:  MOVLW  1A
0D26:  MOVWF  FF6
0D28:  MOVLW  04
0D2A:  MOVWF  FF7
0D2C:  RCALL  0660
....................             } 
....................             else 
0D2E:  BRA    0D68
....................             { 
....................                lcd_putc("\f"); 
0D30:  MOVLW  28
0D32:  MOVWF  FF6
0D34:  MOVLW  04
0D36:  MOVWF  FF7
0D38:  RCALL  0660
....................                printf(lcd_putc,"khoang cach:%3.2f",range); delay_ms(50); 
0D3A:  MOVLW  2A
0D3C:  MOVWF  FF6
0D3E:  MOVLW  04
0D40:  MOVWF  FF7
0D42:  MOVLW  0C
0D44:  MOVWF  21
0D46:  BRA    0942
0D48:  MOVLW  02
0D4A:  MOVWF  FE9
0D4C:  MOVFF  20,24
0D50:  MOVFF  1F,23
0D54:  MOVFF  1E,22
0D58:  MOVFF  1D,21
0D5C:  MOVWF  25
0D5E:  BRA    0B24
0D60:  MOVLW  32
0D62:  MOVWF  2F
0D64:  CALL   043C
....................                
....................             } 
....................  
....................    } 
0D68:  BRA    0CEC
....................  
.................... } 
.................... void start() 
.................... {  
0D6A:  SLEEP 
....................   output_high(trig); 
*
0680:  BCF    F93.3
0682:  BSF    F8A.3
....................   delay_us(50); 
0684:  MOVLW  31
0686:  MOVWF  00
0688:  DECFSZ 00,F
068A:  BRA    0688
068C:  BRA    068E
....................   output_low(trig); 
068E:  BCF    F93.3
0690:  BCF    F8A.3
....................   while(!(input(echo))); 
0692:  BSF    F93.2
0694:  BTFSS  F81.2
0696:  BRA    0692
....................   set_timer1(0); 
0698:  CLRF   FCF
069A:  CLRF   FCE
....................   enable_interrupts(GLOBAL); 
069C:  MOVLW  C0
069E:  IORWF  FF2,F
....................   delay_ms(50); 
06A0:  MOVLW  32
06A2:  MOVWF  2F
06A4:  RCALL  043C
.................... } 
06A6:  GOTO   088C (RETURN)
.................... float32 kc() 
.................... { 
*
087A:  CLRF   24
087C:  CLRF   23
087E:  CLRF   22
0880:  CLRF   21
0882:  CLRF   28
0884:  CLRF   27
0886:  CLRF   26
0888:  CLRF   25
....................    float32 time_us=0,distance=0; 
....................    start(); 
088A:  BRA    0680
....................    disable_interrupts(GLOBAL); 
088C:  BCF    FF2.6
088E:  BCF    FF2.7
0890:  BTFSC  FF2.7
0892:  BRA    088E
....................    if(num_pulse>180000) 
0894:  CLRF   2C
0896:  MOVLW  C8
0898:  MOVWF  2B
089A:  MOVLW  2F
089C:  MOVWF  2A
089E:  MOVLW  90
08A0:  MOVWF  29
08A2:  MOVFF  1C,30
08A6:  MOVFF  1B,2F
08AA:  MOVFF  1A,2E
08AE:  MOVFF  19,2D
08B2:  RCALL  06AA
08B4:  BNC   08CA
....................    { 
....................       num_pulse=0; 
08B6:  CLRF   1C
08B8:  CLRF   1B
08BA:  CLRF   1A
08BC:  CLRF   19
....................    return NO_OBJECT; 
08BE:  CLRF   00
08C0:  CLRF   01
08C2:  CLRF   02
08C4:  CLRF   03
08C6:  BRA    093E
....................    } 
....................    else 
08C8:  BRA    093E
....................    { 
....................       time_us=num_pulse/6; 
08CA:  MOVFF  1C,2C
08CE:  MOVFF  1B,2B
08D2:  MOVFF  1A,2A
08D6:  MOVFF  19,29
08DA:  CLRF   30
08DC:  CLRF   2F
08DE:  MOVLW  40
08E0:  MOVWF  2E
08E2:  MOVLW  81
08E4:  MOVWF  2D
08E6:  RCALL  0720
08E8:  MOVFF  03,24
08EC:  MOVFF  02,23
08F0:  MOVFF  01,22
08F4:  MOVFF  00,21
....................       distance=time_us/58; 
08F8:  MOVFF  24,2C
08FC:  MOVFF  23,2B
0900:  MOVFF  22,2A
0904:  MOVFF  21,29
0908:  CLRF   30
090A:  CLRF   2F
090C:  MOVLW  68
090E:  MOVWF  2E
0910:  MOVLW  84
0912:  MOVWF  2D
0914:  RCALL  0720
0916:  MOVFF  03,28
091A:  MOVFF  02,27
091E:  MOVFF  01,26
0922:  MOVFF  00,25
....................       num_pulse=0; 
0926:  CLRF   1C
0928:  CLRF   1B
092A:  CLRF   1A
092C:  CLRF   19
....................        
....................    return distance; 
092E:  MOVFF  25,00
0932:  MOVFF  26,01
0936:  MOVFF  27,02
093A:  MOVFF  28,03
....................    } 
.................... } 
093E:  GOTO   0CEE (RETURN)
....................  

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 0E18   PUT NOBROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
