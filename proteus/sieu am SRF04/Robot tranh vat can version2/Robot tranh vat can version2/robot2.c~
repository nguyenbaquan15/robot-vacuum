/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.0 Professional
Automatic Program Generator
© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : Robot tu hanh tranh vat can
Version : 1.0
Date    : 24/02/2014
Author  : Dang Quoc Viet
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 8,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*****************************************************/

#include <mega16.h>
#include <delay.h>
#include <stdio.h>

#define trigger PORTB.0
#define echo PIND.2
#define trigger1 PORTB.1
#define echo1 PIND.3
unsigned int temp = 0;

//PORTB 4,5 banh phai
//PORTB 6,7 banh trai

unsigned char timeout;
//unsigned int a,b;
unsigned char dis[15];
unsigned int count1, count2;

// Alphanumeric LCD Module functions
#include <alcd.h>

// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{
//lcd_puts("asas");
count1 = TCNT1; 
count1 = count1/58;
count1 = count1 - 7; 
}

// External Interrupt 1 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{
count2 = TCNT1 - temp; 
count2 = count2/58; 

}

//-----------------------------------------------

void start()

{

trigger = 0;
trigger1 = 0; 
delay_us(1);
trigger = 1;
delay_us(50);
trigger1 = 1;
delay_ms(12);
trigger = 0;
delay_us(50);
trigger1 = 0;



 } 
 //-----------------------------------
 void stop()
{
PORTB.7 = 0 ;
PORTB.6 = 0;
PORTB.5 = 0;
PORTB.4 = 0;
 
 } 
 //---------------------------------
 void lui_trai()
 {
PORTB.7 = 0 ;
PORTB.6 = 0;
PORTB.5 = 1;
PORTB.4 = 0;
lcd_gotoxy(0,1);
lcd_puts(" lui trai");
 }
 //--------------------------------------------
 void lui_phai()
 {
PORTB.7 = 1 ;
PORTB.6 = 0;
PORTB.5 = 0;
PORTB.4 = 0;
lcd_gotoxy(0,1);
lcd_puts(" lui phai");
 }
//Ham re trai
void turn_left()
{
PORTB.7 = 0;
PORTB.6 = 0;
PORTB.5 = 0;
PORTB.4 = 1;
lcd_gotoxy(0,1);
lcd_puts(" Re trai");
} 

void turn_right()
{
PORTB.7 = 0;
PORTB.6 = 1;
PORTB.5 = 0;
PORTB.4 = 0;
lcd_gotoxy(0,1);
lcd_puts(" Re phai");
}

void dithang()
{
PORTB.7 = 0;
PORTB.6 = 1;
PORTB.5 = 0;
PORTB.4 = 1;
lcd_gotoxy(0,1);
lcd_puts(" tien");
}

//------------------

// Declare your global variables here

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTA=0x00;
DDRA=0x00;

// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0xff;

// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0 
PORTD=0x00;
DDRD=0x03;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 1000,000 kHz
// Mode: Normal top=0xFFFF
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// INT1: On
// INT1 Mode: Falling Edge
// INT2: Off
GICR|=0xC0;
MCUCR=0x0A;
MCUCSR=0x00;
GIFR=0xC0;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;

// USART initialization
// USART disabled
UCSRB=0x00;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC disabled
ADCSRA=0x00;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Alphanumeric LCD initialization
// Connections specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTC Bit 0
// RD - PORTC Bit 1
// EN - PORTC Bit 2
// D4 - PORTC Bit 4
// D5 - PORTC Bit 5
// D6 - PORTC Bit 6
// D7 - PORTC Bit 7
// Characters/line: 8
lcd_init(16);
lcd_puts("Dang Quoc Viet");
delay_ms(2000);
lcd_clear();

// Global enable interrupts
#asm("sei")

while (1)
      {
start();  //ben trai
TCNT1 = 0; 
while(echo == 0){};
TCCR1B = 0x02;
while (echo1 == 0) {};
temp = TCNT1;
timeout = 0;
while((echo == 1)&&(timeout < 10))
{
timeout++;  
delay_ms(1);
}


if(count1 < 45)
{
turn_right();

    if((count1 < 35)&&(count2 < 35))
        {
        stop();
        delay_ms(100);
        if(count1 < count2)
            {
             lui_trai();
             delay_ms(100);
            }
        else if (count1 >=count2)
            {
            lui_phai();
            delay_ms(100);
            }
        }
}

else if (count2 <45)
{
    turn_left();
    if((count1 < 35)&&(count2 < 35))
        {
        stop();
        delay_ms(100);
        if(count1 < count2)
            {
             lui_trai(); 
             delay_ms(100);
            }
        else if (count1 >=count2)
            {
            lui_phai(); 
            delay_ms(100);
            }
        }
}


else dithang();

lcd_clear();
lcd_gotoxy(0,0);
sprintf (dis,"%2d cm", count1);
lcd_puts(dis);  
lcd_gotoxy(10,0);
sprintf (dis,"%2d cm",count2);
lcd_puts(dis);
//delay_ms(40);
    }
}
