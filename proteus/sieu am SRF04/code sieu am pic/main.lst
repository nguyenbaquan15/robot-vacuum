CCS PCH C Compiler, Version 4.140, 28366               20-Apr-15 23:30

               Filename:   C:\Users\quan\Desktop\code_robot\sieu am SRF04\code sieu am pic\main.lst

               ROM used:   1802 bytes (5%)
                           Largest free fragment is 30966
               RAM used:   10 (1%) at main() level
                           36 (2%) worst case
               Stack:     6 locations

*
0000:  GOTO   068C
.................... #include <main.h> 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=12000000) 
*
0036:  CLRF   FEA
0038:  MOVLW  18
003A:  MOVWF  FE9
003C:  MOVF   FEF,W
003E:  BZ    005C
0040:  MOVLW  03
0042:  MOVWF  01
0044:  CLRF   00
0046:  DECFSZ 00,F
0048:  BRA    0046
004A:  DECFSZ 01,F
004C:  BRA    0044
004E:  MOVLW  E3
0050:  MOVWF  00
0052:  DECFSZ 00,F
0054:  BRA    0052
0056:  NOP   
0058:  DECFSZ FEF,F
005A:  BRA    0040
005C:  RETURN 0
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN  PIN_C0                                     
.................... #define LCD_RS_PIN      PIN_C3                                     
.................... #define LCD_RW_PIN      PIN_C1                                     
.................... #define LCD_DATA4       PIN_C4                                     
.................... #define LCD_DATA5       PIN_C5                                     
.................... #define LCD_DATA6       PIN_C6                                     
.................... #define LCD_DATA7       PIN_C7   
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00F2:  BSF    F94.4
....................    output_float(LCD_DATA5); 
00F4:  BSF    F94.5
....................    output_float(LCD_DATA6); 
00F6:  BSF    F94.6
....................    output_float(LCD_DATA7); 
00F8:  BSF    F94.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00FA:  BSF    F8B.1
00FC:  BCF    F94.1
....................    delay_cycles(1); 
00FE:  NOP   
....................    lcd_output_enable(1); 
0100:  BSF    F8B.0
0102:  BCF    F94.0
....................    delay_cycles(1); 
0104:  NOP   
....................    high = lcd_read_nibble(); 
0106:  RCALL  00A0
0108:  MOVFF  01,1F
....................        
....................    lcd_output_enable(0); 
010C:  BCF    F8B.0
010E:  BCF    F94.0
....................    delay_cycles(1); 
0110:  NOP   
....................    lcd_output_enable(1); 
0112:  BSF    F8B.0
0114:  BCF    F94.0
....................    delay_us(1); 
0116:  BRA    0118
0118:  NOP   
....................    low = lcd_read_nibble(); 
011A:  RCALL  00A0
011C:  MOVFF  01,1E
....................        
....................    lcd_output_enable(0); 
0120:  BCF    F8B.0
0122:  BCF    F94.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0124:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
0126:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
0128:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
012A:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
012C:  SWAPF  1F,W
012E:  MOVWF  00
0130:  MOVLW  F0
0132:  ANDWF  00,F
0134:  MOVF   00,W
0136:  IORWF  1E,W
0138:  MOVWF  01
.................... } 
013A:  GOTO   014A (RETURN)
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00A0:  CLRF   20
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00A2:  BSF    F94.4
00A4:  MOVLW  00
00A6:  BTFSC  F82.4
00A8:  MOVLW  01
00AA:  IORWF  20,F
....................    n |= input(LCD_DATA5) << 1; 
00AC:  BSF    F94.5
00AE:  MOVLW  00
00B0:  BTFSC  F82.5
00B2:  MOVLW  01
00B4:  MOVWF  00
00B6:  BCF    FD8.0
00B8:  RLCF   00,F
00BA:  MOVF   00,W
00BC:  IORWF  20,F
....................    n |= input(LCD_DATA6) << 2; 
00BE:  BSF    F94.6
00C0:  MOVLW  00
00C2:  BTFSC  F82.6
00C4:  MOVLW  01
00C6:  MOVWF  00
00C8:  RLCF   00,F
00CA:  RLCF   00,F
00CC:  MOVLW  FC
00CE:  ANDWF  00,F
00D0:  MOVF   00,W
00D2:  IORWF  20,F
....................    n |= input(LCD_DATA7) << 3; 
00D4:  BSF    F94.7
00D6:  MOVLW  00
00D8:  BTFSC  F82.7
00DA:  MOVLW  01
00DC:  MOVWF  00
00DE:  RLCF   00,F
00E0:  RLCF   00,F
00E2:  RLCF   00,F
00E4:  MOVLW  F8
00E6:  ANDWF  00,F
00E8:  MOVF   00,W
00EA:  IORWF  20,F
....................     
....................    return(n); 
00EC:  MOVFF  20,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00F0:  RETURN 0
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
005E:  BTFSC  1F.0
0060:  BRA    0066
0062:  BCF    F8B.4
0064:  BRA    0068
0066:  BSF    F8B.4
0068:  BCF    F94.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
006A:  BTFSC  1F.1
006C:  BRA    0072
006E:  BCF    F8B.5
0070:  BRA    0074
0072:  BSF    F8B.5
0074:  BCF    F94.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0076:  BTFSC  1F.2
0078:  BRA    007E
007A:  BCF    F8B.6
007C:  BRA    0080
007E:  BSF    F8B.6
0080:  BCF    F94.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0082:  BTFSC  1F.3
0084:  BRA    008A
0086:  BCF    F8B.7
0088:  BRA    008C
008A:  BSF    F8B.7
008C:  BCF    F94.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
008E:  NOP   
....................    lcd_output_enable(1); 
0090:  BSF    F8B.0
0092:  BCF    F94.0
....................    delay_us(2); 
0094:  BRA    0096
0096:  BRA    0098
0098:  BRA    009A
....................    lcd_output_enable(0); 
009A:  BCF    F8B.0
009C:  BCF    F94.0
.................... } 
009E:  RETURN 0
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
013E:  BCF    F94.0
....................    lcd_rs_tris(); 
0140:  BCF    F94.3
....................    lcd_rw_tris(); 
0142:  BCF    F94.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0144:  BCF    F8B.3
0146:  BCF    F94.3
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0148:  BRA    00F2
014A:  MOVFF  01,1E
014E:  BTFSC  01.7
0150:  BRA    0148
....................    lcd_output_rs(address); 
0152:  MOVF   1C,F
0154:  BNZ   015A
0156:  BCF    F8B.3
0158:  BRA    015C
015A:  BSF    F8B.3
015C:  BCF    F94.3
....................    delay_cycles(1); 
015E:  NOP   
....................    lcd_output_rw(0); 
0160:  BCF    F8B.1
0162:  BCF    F94.1
....................    delay_cycles(1); 
0164:  NOP   
....................    lcd_output_enable(0); 
0166:  BCF    F8B.0
0168:  BCF    F94.0
....................    lcd_send_nibble(n >> 4); 
016A:  SWAPF  1D,W
016C:  MOVWF  1E
016E:  MOVLW  0F
0170:  ANDWF  1E,F
0172:  MOVFF  1E,1F
0176:  RCALL  005E
....................    lcd_send_nibble(n & 0xf); 
0178:  MOVF   1D,W
017A:  ANDLW  0F
017C:  MOVWF  1E
017E:  MOVWF  1F
0180:  RCALL  005E
.................... } 
0182:  RETURN 0
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0184:  BCF    F94.4
....................    output_drive(LCD_DATA5); 
0186:  BCF    F94.5
....................    output_drive(LCD_DATA6); 
0188:  BCF    F94.6
....................    output_drive(LCD_DATA7); 
018A:  BCF    F94.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
018C:  BCF    F94.0
....................    lcd_rs_tris(); 
018E:  BCF    F94.3
....................    lcd_rw_tris(); 
0190:  BCF    F94.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0192:  BCF    F8B.3
0194:  BCF    F94.3
....................    lcd_output_rw(0); 
0196:  BCF    F8B.1
0198:  BCF    F94.1
....................    lcd_output_enable(0); 
019A:  BCF    F8B.0
019C:  BCF    F94.0
....................      
....................    delay_ms(15); 
019E:  MOVLW  0F
01A0:  MOVWF  18
01A2:  RCALL  0036
....................    for(i=1;i<=3;++i) 
01A4:  MOVLW  01
01A6:  MOVWF  0A
01A8:  MOVF   0A,W
01AA:  SUBLW  03
01AC:  BNC   01BE
....................    { 
....................        lcd_send_nibble(3); 
01AE:  MOVLW  03
01B0:  MOVWF  1F
01B2:  RCALL  005E
....................        delay_ms(5); 
01B4:  MOVLW  05
01B6:  MOVWF  18
01B8:  RCALL  0036
....................    } 
01BA:  INCF   0A,F
01BC:  BRA    01A8
....................     
....................    lcd_send_nibble(2); 
01BE:  MOVLW  02
01C0:  MOVWF  1F
01C2:  RCALL  005E
....................    delay_ms(5); 
01C4:  MOVLW  05
01C6:  MOVWF  18
01C8:  RCALL  0036
....................    for(i=0;i<=3;++i) 
01CA:  CLRF   0A
01CC:  MOVF   0A,W
01CE:  SUBLW  03
01D0:  BNC   01E4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01D2:  CLRF   03
01D4:  MOVF   0A,W
01D6:  RCALL  0004
01D8:  MOVWF  0B
01DA:  CLRF   1C
01DC:  MOVWF  1D
01DE:  RCALL  013E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01E0:  INCF   0A,F
01E2:  BRA    01CC
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
01E4:  GOTO   06AA (RETURN)
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
01E8:  DECFSZ 19,W
01EA:  BRA    01EE
01EC:  BRA    01F4
....................       address=LCD_LINE_TWO; 
01EE:  MOVLW  40
01F0:  MOVWF  1A
....................    else 
01F2:  BRA    01F6
....................       address=0; 
01F4:  CLRF   1A
....................       
....................    address+=x-1; 
01F6:  MOVLW  01
01F8:  SUBWF  18,W
01FA:  ADDWF  1A,F
....................    lcd_send_byte(0,0x80|address); 
01FC:  MOVF   1A,W
01FE:  IORLW  80
0200:  MOVWF  1B
0202:  CLRF   1C
0204:  MOVWF  1D
0206:  RCALL  013E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0208:  RETURN 0
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
020A:  MOVF   17,W
020C:  XORLW  07
020E:  BZ    021E
0210:  XORLW  0B
0212:  BZ    0228
0214:  XORLW  06
0216:  BZ    0238
0218:  XORLW  02
021A:  BZ    0244
021C:  BRA    024E
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
021E:  MOVLW  01
0220:  MOVWF  18
0222:  MOVWF  19
0224:  RCALL  01E8
0226:  BRA    0258
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0228:  CLRF   1C
022A:  MOVLW  01
022C:  MOVWF  1D
022E:  RCALL  013E
....................                      delay_ms(2); 
0230:  MOVLW  02
0232:  MOVWF  18
0234:  RCALL  0036
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0236:  BRA    0258
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0238:  MOVLW  01
023A:  MOVWF  18
023C:  MOVLW  02
023E:  MOVWF  19
0240:  RCALL  01E8
0242:  BRA    0258
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0244:  CLRF   1C
0246:  MOVLW  10
0248:  MOVWF  1D
024A:  RCALL  013E
024C:  BRA    0258
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
024E:  MOVLW  01
0250:  MOVWF  1C
0252:  MOVFF  17,1D
0256:  RCALL  013E
....................      #endif 
....................    } 
.................... } 
0258:  RETURN 0
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define trig PIN_B3 
.................... #define echo PIN_B2 
.................... int16 t; 
.................... float kc=0; 
.................... void start(); 
.................... void main() 
.................... {  
*
068C:  CLRF   FF8
068E:  BCF    FD0.7
0690:  CLRF   FEA
0692:  CLRF   FE9
0694:  CLRF   09
0696:  CLRF   08
0698:  CLRF   07
069A:  CLRF   06
069C:  MOVF   FC1,W
069E:  ANDLW  C0
06A0:  IORLW  0F
06A2:  MOVWF  FC1
06A4:  MOVLW  07
06A6:  MOVWF  FB4
....................     
....................     
....................    lcd_init(); delay_us(1);  
06A8:  BRA    0184
06AA:  BRA    06AC
06AC:  NOP   
....................    lcd_putc("NGUYEN BA QUAN"); delay_ms(100); 
06AE:  MOVLW  18
06B0:  MOVWF  FF6
06B2:  MOVLW  00
06B4:  MOVWF  FF7
06B6:  RCALL  025A
06B8:  MOVLW  64
06BA:  MOVWF  18
06BC:  RCALL  0036
....................    lcd_putc("\f");      
06BE:  MOVLW  28
06C0:  MOVWF  FF6
06C2:  MOVLW  00
06C4:  MOVWF  FF7
06C6:  RCALL  025A
....................    while(TRUE) 
....................    { 
....................       start(); 
06C8:  BRA    03A4
....................       delay_ms(5); 
06CA:  MOVLW  05
06CC:  MOVWF  18
06CE:  RCALL  0036
....................       printf(lcd_putc,"kc:%3.2f",kc);  delay_ms(100); 
06D0:  MOVLW  2A
06D2:  MOVWF  FF6
06D4:  MOVLW  00
06D6:  MOVWF  FF7
06D8:  MOVLW  03
06DA:  MOVWF  0A
06DC:  BRA    0424
06DE:  MOVLW  02
06E0:  MOVWF  FE9
06E2:  MOVFF  09,0D
06E6:  MOVFF  08,0C
06EA:  MOVFF  07,0B
06EE:  MOVFF  06,0A
06F2:  MOVWF  0E
06F4:  BRA    0512
06F6:  MOVLW  64
06F8:  MOVWF  18
06FA:  RCALL  0036
....................       lcd_putc("\f"); 
06FC:  MOVLW  34
06FE:  MOVWF  FF6
0700:  MOVLW  00
0702:  MOVWF  FF7
0704:  RCALL  025A
....................    } 
0706:  BRA    06C8
....................  
.................... } 
.................... void start() 
.................... {  
0708:  SLEEP 
....................   output_high(trig); 
*
03A4:  BCF    F93.3
03A6:  BSF    F8A.3
....................   delay_us(20); 
03A8:  MOVLW  13
03AA:  MOVWF  00
03AC:  DECFSZ 00,F
03AE:  BRA    03AC
03B0:  BRA    03B2
....................   output_low(trig); 
03B2:  BCF    F93.3
03B4:  BCF    F8A.3
....................   while(!input(echo))  {}  
03B6:  BSF    F93.2
03B8:  BTFSC  F81.2
03BA:  BRA    03BE
03BC:  BRA    03B6
....................   setup_timer_1(T1_INTERNAL|T1_DIV_BY_4); 
03BE:  MOVLW  A5
03C0:  MOVWF  FCD
....................   set_timer1(0);  
03C2:  CLRF   FCF
03C4:  CLRF   FCE
....................   while(!input(echo))  {}                       
03C6:  BSF    F93.2
03C8:  BTFSC  F81.2
03CA:  BRA    03CE
03CC:  BRA    03C6
....................   set_timer1(0);                          
03CE:  CLRF   FCF
03D0:  CLRF   FCE
....................   while(input(echo))  {}       
03D2:  BSF    F93.2
03D4:  BTFSS  F81.2
03D6:  BRA    03DA
03D8:  BRA    03D2
....................   setup_timer_1( T1_DISABLED ); 
03DA:  CLRF   FCD
....................   t=get_timer1();                        
03DC:  MOVF   FCE,W
03DE:  MOVWF  04
03E0:  MOVFF  FCF,05
....................   kc=t*0.017; 
03E4:  MOVFF  05,0B
03E8:  MOVFF  04,0A
03EC:  BRA    027A
03EE:  MOVFF  03,1A
03F2:  MOVFF  02,19
03F6:  MOVFF  01,18
03FA:  MOVFF  00,17
03FE:  MOVLW  96
0400:  MOVWF  1E
0402:  MOVLW  43
0404:  MOVWF  1D
0406:  MOVLW  0B
0408:  MOVWF  1C
040A:  MOVLW  79
040C:  MOVWF  1B
040E:  RCALL  02B2
0410:  MOVFF  03,09
0414:  MOVFF  02,08
0418:  MOVFF  01,07
041C:  MOVFF  00,06
....................    
.................... } 
0420:  GOTO   06CA (RETURN)
....................  
....................  

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 0E18   PUT NOBROWNOUT BORV21 NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
